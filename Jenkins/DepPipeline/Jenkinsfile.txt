// ----  My first Jenking File --- //

// ToolsFonctions


pipeline {
	
    agent any
	
 environment {
	 
	 // AWS s3 PARAMETERS
	 def AWS_CLI = "C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe"
	 def ID_Account = "591384987647"
	 def REGION_LIST_STR = "['us-east-1','us-east-2']"
	 def BUCKET_NAME = "depobucket1"
	 
	 //def BUCKET_CREDENTIAL = "C:\Users\s.juillard\Desktop\CrendentialFile\JenkinsKeys_codecommit_credentials.csv"  //Possible avec un compte IAM
	 def aws_access_key_id = "ASIAYTMKKY77R5S2JGXK"
	 def aws_secret_access_key = "36/jGfaiIeXkU4wkZcdQFhZ6ejibcq+P+4HCcOj9"
	 def BUCKET_PATH = "s3://${BUCKET_NAME}"
	 
	 // ACL PARAMETERS
	 def ACL_TEST_CREDENTIAL = "7b69568f-9794-4be8-a04b-7d98b44f5efc"
	 def ACL_FLAG = "AuthenticatedRead" //Specifies the owner is granted Full Control and to the Authenticated Users group grantee is granted Read access
	 
	 // Lambda parameters
	 def FUNCTION_NAME = ""
	 def TEST_CMD = "" //Command to test Lambda
	 
	 // Layer parameters
	def LAYER_NAME = ""
	def LAYER_DECPR = ""
	def LAYER_LICENSE = ""
	def RUNTIME = ""
	 
	 // CHECKOUT PARAMETERS
	def file_name_requirements = "serverless"
	def file_extention = "*.zip"
	
	 // GLOBAL VARIABLES DECLARATION
	def file_name = "null"
	
    }
	
    stages {
	    
					// ----------------          CHECKOUT           ----------------- //
		stage ('Checkout') {
			steps { 
				script {
					
					def files = findFiles glob: "${file_extention}"
					
					//Check
					files.each { item ->
						if (item.name.startsWith(file_name_requirements)) {
							file_name = item.name
							echo 'Checkout sucess'
						}
					}
					
					//Abort if no files founded
					if (file_name == "null") {
						currentBuild.result = 'ABORTED'
						error('Checkout failed')
						return
					}
					
				}
			}
		}
	    
					// ----------------      CONNECTE TO BUCKET      ---------------- //
	    /*
		stage('Connecte to S3 Bucket') {
		    steps {
			    bat("\"${AWS_CLI}\" configure set aws_access_key_id ${aws_access_key_id}")
			    bat("\"${AWS_CLI}\" configure set aws_secret_access_key ${aws_secret_access_key}")
			    bat("\"${AWS_CLI}\" configure set default.region ${REGION_LIST[0]}")
		    }
		}
	    */
		
					// ----------------      TRANSFER TO BUCKET      ---------------- //
		stage('Deploy to S3 Bucket') {
		    steps {
			    bat("\"${AWS_CLI}\" s3 cp \"${WORKSPACE}\\${file_name}\" ${BUCKET_PATH}")
		    }
		}
	    			// ----------------      TRANSION TO LAYER       ---------------- //
		stage('Tansition to layer') {
		    steps {
			echo "..." /*
			bat("\"${AWS_CLI}\" lambda publish-layer-version "+
			    "--layer-name ${LAYER_NAME} "+
			    "--description ${LAYER_DECPR} "+
			    "--license-info ${LAYER_LICENSE} "+
			    "--content S3Bucket=${BUCKET_NAME}-${REGION_LIST[0]}-${ID_Account},S3Key=${file_name}"+
			    "--compatible-runtimes ${RUNTIME}")
			*/
		    }
		}
	    			// ----------------       LAMBDA DEPLOMENT       ---------------- //
		stage('Creat Lambda') {
		    steps {
			echo "..." /*
			bat("\"${AWS_CLI}\" lambda invoke --function-name ${FUNCTION_NAME}")
			*/
		    }
		}

				    // ----------------     DEPLOY TO REGION LIST    ---------------- //
		stage('Deploy to all regions') {
		    steps {
			  echo "..." /*
			  script {
				  def REGION_LIST = Eval.me(REGION_LIST_STR)
				  REGION_LIST.remove(REGION_LIST[0])
				  if(REGION_LIST.size()>0){
					  REGION_LIST.each { item ->
						echo "Deploy to region ${item}"
						bat("\"${AWS_CLI}\" cloudformation package --template-file ${file_name} --output-template-file /tmp/cf-helloworld-sam.yaml --s3-bucket ${BUCKET_NAME}${item} --region ${item}")
> 						bat("\"${AWS_CLI}\" cloudformation deploy --template-file ${file_name} --stack-name multiregionhelloworld --capabilities CAPABILITY_IAM --region ${item}")
						echo "Deploy to region ${item} sucess"
					  }
				 }
			  }
			  */
		    }
		}
			       	// ----------------   Deploy Landba with Layer   ---------------- //
		stage('Deploy Lambda from Layer') {
		    steps {
			echo "..."
		    }
		}
	    
	}
	post { 
		always { 
			// Clean WorkSpace
			cleanWs()
		}
	}
	
}
