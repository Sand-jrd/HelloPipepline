pipeline {
    agent any
    
    environment {
        def product_target = "${-> env.WORKSPACE}/target"
        def bluage_property_file = "${-> env.WORKSPACE}/QA-Bluage.properties"
        def ant_options_bluage_setup = "-f ${-> env.WORKSPACE}\\QA\\bluage\\reverse-headless.xml -DPRODUCT_SOURCE=\"${params.PRODUCT_SOURCE}\" -DPRODUCT_TARGET=${product_target} -DPKG.install.enable=true -Dproduct.license.server.host=sr-130301.netfective.com -Dproduct.license.server.port=8888 -Dbluage.property.file=${bluage_property_file} -Dbluage.jubula.enable=true -Dbluage.tester.enable=true -DSTACK_TARGET=${params.STACK_TARGET}"

        def forward_test_basedir = "${-> env.WORKSPACE}\\QA_Forward"
        def forward_build_basedir = "${-> env.WORKSPACE}\\build"
        def ant_options_test_headless_bags = "-f ${forward_test_basedir}\\testing-ForwardWeb-bags-headless.xml -DPRODUCT_TARGET=${product_target} -Dqual.toolkit.basedir=${-> env.WORKSPACE}/QA/toolkit -Dheadless.property.file=${bluage_property_file} -Dproject.basedir=${forward_build_basedir}/Bags -DSTACK_TARGET=${params.STACK_TARGET}"
        def ant_options_test_headless_process = "-f ${forward_test_basedir}\\testing-ForwardWeb-process-headless.xml -DPRODUCT_TARGET=${product_target} -Dqual.toolkit.basedir=${-> env.WORKSPACE}/QA/toolkit -Dheadless.property.file=${bluage_property_file} -Dproject.basedir=${forward_build_basedir}/Process -DSTACK_TARGET=${params.STACK_TARGET}"
    }
    stages {
        stage('Checkout') { // for display purposes
            steps {
                cleanWs()
                
                dir('QA') {
                    git credentialsId: '6a895806-766a-4cbd-9633-971afff12226', url:'http://srv-200510.netfective.com:8088/r/Qualification.git', branch: 'master'
                }
                dir ('QA_Forward') {
                    git credentialsId: '6a895806-766a-4cbd-9633-971afff12226', url:'http://srv-200510.netfective.com:8088/r/Qualification/ForwardWeb.git', branch: 'master'
                }
            }
        }
        stage('Deploy') { // for display purposes
            steps {
                copyArtifacts(
                    projectName: params.PLATFORM_TARGET + '/BUILD_TOOLS_QUALIF',
                    selector: lastSuccessful(),
                    flatten: true,
                    target : 'QA/toolkit/commons/resources/plugins') //env.WORKSPACE + dropins_basedir
    
                withAnt(installation: 'ant-1.9.6') {
                    bat "ant ${ant_options_bluage_setup} test-setup"
                }
            }
        }
        //stage('Parallel Test Stage') {
        //    parallel {
                stage('Test UC') { // for display purposes
                    steps {
                        //echo 'no UC Tests'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          build job: 'BFE_RUN_UC_BATCH', 
                            parameters: [
                                string(name: 'PRODUCT_TARGET', value: product_target),
                                string(name: 'STACK_FORWARD', value: params.STACK_FORWARD),
                                string(name: 'UC_NAME_LIST', value: '')
                            ]
                        }
                    }
                }
                stage('Test Headless (Bags)') { // for display purposes
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            dir ('build/Bags') {
                                withAnt(installation: 'ant-1.9.6') {
                                    bat "ant ${ant_options_test_headless_bags} test"
                                }
                            }
                        }
                    }
                   post {
                        always {
                            archiveArtifacts artifacts: 'QA_Forward/Bags/BA_BAGS_TESTER/report/**/*.*', fingerprint: true
                            junit testResults: 'QA_Forward/Bags/BA_BAGS_TESTER/report/report.xml', allowEmptyResults: false
                        }
                   }
                }
                stage('Test Headless (Process)') { // for display purposes
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            dir ('build/Process') {
                                withAnt(installation: 'ant-1.9.6') {
                                    bat "ant ${ant_options_test_headless_process} test"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'QA_Forward/Process/BA_PROCESS_TESTER/report/**/*.*', fingerprint: true
                            junit testResults: 'QA_Forward/Process/BA_PROCESS_TESTER/report/report.xml', allowEmptyResults: false
                        }
                    }
               }
                stage('Test Jubula (Wizard)') { // for display purposes
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          build job: 'BFE_RUN_JUBULA', 
                            parameters: [
                                string(name: 'PRODUCT_TARGET', value: product_target),
                                string(name: 'STACK_FORWARD', value: params.STACK_FORWARD),
                                string(name: 'GUI_SESSION_USER', value: 'jubula_session_1'),
                                string(name: 'jubula.property.file', value: bluage_property_file),
                                string(name: 'ant.build.script', value: 'testing-BFE-jubula-wizard.xml')
                            ]
                        }
                    }
                }
                stage('Test Jubula (Workshop)') { // for display purposes
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          build job: 'BFE_RUN_JUBULA', 
                            parameters: [
                                string(name: 'PRODUCT_TARGET', value: product_target),
                                string(name: 'STACK_FORWARD', value: params.STACK_FORWARD),
                                string(name: 'GUI_SESSION_USER', value: 'jubula_session_2'),
                                string(name: 'jubula.property.file', value: bluage_property_file),
                                string(name: 'ant.build.script', value: 'testing-BFE-jubula.xml')
                            ]
                        }
                    }
                }
        //    }
        //}
    }
    post {
        always {
            step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: params.mails, sendToIndividuals: false])
        }
    }
}