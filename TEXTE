PRADET Sébastien (directeur ecommerce)
https://www.bluage.com/products/serverless-cobol-quickstart
https://github.com/BluAge/ServerlessCOBOLforAWS 

INTRODUCTION !!!! ARCHI BIEN

During the last quarter of 2018, we introduced the serverless COBOL for AWS solution, making use of AWS Lambda Layers (officially presented during AWS Re:invent 2018) and our COBOL to java compiler.

For the first time, COBOL developers were able to compile and deploy their code to AWS Lambda functions, using their favourite language, an universal IDE (Visual Studio Code) and a remote compiler service, hosted on AWS.

During the first quarter of 2019, we wrote dedicated extensions to permit the COBOL code to interact with popular AWS services (SQS, S3, Kinesis, API Gateway, DynamoDB) and handle respective triggers for Lambda functions.

At AWS Summit Tokyo 2019, in partnership with Accenture Japan, we demonstrated how we managed to migrate a CICS Online COBOL application into a serverless web application, relying on Lambda functions for the backend (see the video).

Réalisation Technique

Nous avons vu dans la partie précédente, la chaîne de production qui doit être réalisé. Pour la concrétiser, une multitude d'options s'offre à nous. Une des tâches de se stage à été de faire choisir, parmis tous les outils, et toute les méthodes possible celles qui serait la plus adéquats.

Livrables :

Une solution de pipeline devra rescpeer les points suivants : 

     - Doit être parametrables, et ces paramètres doivent être accésibles sans avoir à modifier le code. 
     - Doit être sécurisé, les informations sensible (clef d'accès ect) ne doivent pas être accésible.
     - Doit être peu coûteuse.
     - Ne doit pas nécessiter d'intervention humaines, on cherche à construire une chaîne d'automatisaion, elle doit s'adater à tous les cas de figure possible
     
Dans l'idéal, on pourra également ajouter les livrables suivante : 

     - Le suivit du bon déroulement de la Pipeline doit être facilement lisible
     - Doit être facilement modifiable si lon veux adapter la solution pour d'autre type de produit
     
Présentation des différentes solutions : 

Dans cette section vont être présenter les différentes solutions qui ont été envisagé. Certaine de ces solutions ne concerne qu'un bout de la chaine, et sont parfois combinable.

PROPOSITION #1 : JENKINS

Jenkins est un outils de création de pipeline

PROPOSITION #2 : UTILISER LES OUTILS DE CREATION DE PIPELINE DE AWS

PROPOSITIONS #3 : OUTILS AWS 

Les propositions qui vont suivre permet contourner les outils de pipeline de AWS. Elle demande plus d'effort de programmation, mais on les préfrera pour leurs côut plus faible.
Tous ces outils sont tous de même des outils d'Amazone 

PROPOSITION #3 uno : STEP FUNCTION

AWS Step funcins est un services web qui permet de coordiner les différent composant d'une chaîne d'opération ("Qu'on appelle généralement workflow ou flux d'opéraions"). Cette outils permet de séparé simplement chaque opérations et de pouvoir visualiser et suivre se flux de manière graphique (cf figure). 
Le language pour programmer cete chîne est le "Amazon States Language", baser sur le JSON. Il permet d'executer toutes les opérations sur les services d'aws réalisable sur la console aws, ou par les sdk d'amazones. Ce services permet de facilité a transition entre les états mais ne réalise aucune execution. En revanche, il permet de manager des envionnement d'execution aws qui pourrons effectué du code, comme les lambdas.

Les avantage de cette outils t ça facilié de comprehenion t son suivit graphique qui le rend trs simple à débuger lorsqu'il  a des erreurs. Amazone facture ce services par le nombre de transition effectué à 0,025 USD, soit 0,022 Euro pour 1 000 transitions d'état. Ajouter à cela, le prix d'execution des Lambdas.

PROPOSITION #3 bis : CLOUD FORMATION

AWS Step funcins est un services web qui permet de coordiner les différent composant d'une chaîne d'opération ("Qu'on appelle généralement workflow ou flux d'opéraions"). Cette outils permet de séparé simplement chaque opérations et de pouvoir visualiser et suivre se flux de manière graphique (cf figure). 
Le language pour programmer cete chîne est le "Amazon States Language", baser sur le JSON. Il permet d'executer toutes les opérations sur les services d'aws réalisable sur la console aws, ou par les sdk d'amazones. Ce services permet de facilité a transition entre les états mais ne réalise aucune execution. En revanche, il permet de manager des envionnement d'execution aws qui pourrons effectué du code, comme les lambdas.

PROPOSITION #3 ters : Lambda et sdk

Les lambdas son un envrionnement d'execution
